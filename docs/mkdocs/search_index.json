{
    "docs": [
        {
            "location": "/", 
            "text": "Blueweave\n\n\nBlueweave is a Java framework for recurrent sequential deep learning networks using\n guava and deeplearning4j.  \nbluewave\n is intended to simplify the configuration and \n use of neural networks.\n\n\n\n\n\n\nJava Docs\n - The generated java docs.\n\n\n\n\nOverview\n\n\nblueweave\n uses a builder pattern to setup the netowrk:\n\n\n//build the network\nClassifierNetwork network = new TimeseriesClassifierNetwork.TimeseriesClassifierNetworkBuilder()\n        .setNetworkClasses(trainingModel.getNetworkClasses())\n        .setTrainClassifications(trainingModel.getNetworkClassifications())\n        .setTrainTable(trainingTable)\n        .setTestTable(testingTable)\n        .setConfig(conf,\nTimeseriesClassifierNetwork\n)\n        .build();\n\n//the classification results as a table        \nTable\nInteger, String, Object\n result = network.evaluate();        \n\n\n\n\nData Model For Testing and Training\n\n\nCurrently implementations are limited to \nrecurrent series, but more table types and network classifiers are intended. The data for both \ntrainging and testing can be represented.\n\n\n\n\n\n\n\n\nDate\n\n\nSeries1\n\n\nSeries1\n\n\n\n\n\n\n\n\n\n\n2016-04-01\n\n\n0.12\n\n\n0.22\n\n\n\n\n\n\n2016-04-02\n\n\n0.23\n\n\n0.12\n\n\n\n\n\n\n2016-04-03\n\n\n0.46\n\n\n0.10\n\n\n\n\n\n\n2016-04-04\n\n\n0.51\n\n\n0.10\n\n\n\n\n\n\n2016-04-05\n\n\n1.46\n\n\n0.11\n\n\n\n\n\n\n\n\nTraining Model\n\n\nThe training model is used to define the mapping of each series to the possible classification \ntypes that will be used to train the network. This is an example of training a network to classify\na set of number series.\n\n\n{\n  \nstartDate\n:\n2016-04-01\n,\n  \nendDate\n:\n2016-08-01\n,\n  \nnetworkClasses\n:[\n    {\nid\n:0, \nname\n:\ncyclic\n},\n    {\nid\n:1, \nname\n:\nupward-trend\n},\n    {\nid\n:2, \nname\n:\ndownward-trend\n},\n    {\nid\n:3, \nname\n:\nupward-shift\n},\n    {\nid\n:4, \nname\n:\ndownward-shift\n}\n  ],\n  \nnetworkClassifications\n:[\n    {\nname\n:\nPACW\n, \nclassId\n:0},\n    {\nname\n:\nPAG\n,  \nclassId\n:0},\n    {\nname\n:\nPAHC\n, \nclassId\n:4},\n    {\nname\n:\nPANW\n, \nclassId\n:2},\n    {\nname\n:\nPATK\n, \nclassId\n:3},\n    {\nname\n:\nPATR\n, \nclassId\n:3},\n    {\nname\n:\nPAY\n,  \nclassId\n:4},\n    {\nname\n:\nPAYC\n,  \nclassId\n:1},\n    {\nname\n:\nPAYX\n,  \nclassId\n:3}\n  ]\n}\n\n\n\n\nAnd to deserialize that model for use by the builder:\n\n\n//make the training model\nSequenceNetworkModel trainingModel = GsonFactory.fromJson(\n        IOUtils.toString(\n                TimeseriesClassifierTest.class.getResourceAsStream(\n/data/01/train/trainModel01.json\n), \nUTF-8\n),\n        SequenceNetworkModel.class, GsonFactory.Type.DEFAULT);\n\n\n\n\nData Models\n\n\nThe data model for both training and testing is simple tables. An example of a serialized model \nfor training could be:\n\n\n{\n  \ncolumns\n: [\n    \nDATE\n,\n    \nPACW\n,\n    \nPAG\n,\n    \nPAHC\n,\n    \nPANW\n,\n    \nPATK\n,\n    \nPAY\n,\n    \nPAYC\n,\n    \nPAYX\n\n  ],\n  \ndata\n: [\n    [\n      \n2016-04-01\n,\n      37.07,\n      36.7,\n      27.39,\n      161.12,\n      45.92,\n      28.2,\n      35.43,\n      54.17\n    ],\n    [\n      \n2016-04-04\n,\n      37.11,\n      35.82,\n      27.29,\n      161.59,\n      45.37,\n      27.78,\n      35.8,\n      53.45\n    ],\n    [\n      \n2016-04-05\n,\n      36.25,\n      35.68,\n      26.66,\n      151.92,\n      46.05,\n      27.76,\n      34.43,\n      53.11\n    ],\n    [\n      \n2016-04-06\n,\n      36.76,\n      35.74,\n      27.26,\n      158.22,\n      46.64,\n      28.23,\n      35.52,\n      53.64\n    ]\n  ]\n}\n\n\n\n\nAnd deserializing it is as simple as using the provided factory:\n\n\nTable\nDate, String, Double\n trainingTable = GsonFactory.fromJson(\n    IOUtils.toString( TimeseriesClassifierTest.class.getResourceAsStream(\n               \n/data/01/train/trainTable01.json\n), \nUTF-8\n),\n    TreeBasedTable.class, GsonFactory.Type.DEFAULT);\n\n\n\n\nConfigurations With Typesafe\n\n\nblueweave\n uses typesafe to make setting up multi layer networks easier. \n\n\n{\n  \nTimeseriesClassifierNetwork\n: {\n    \nlayers\n: [{\n      \nnumber\n:0,\n      \ntype\n:\nGravesLSTM\n,\n      \nactivation\n: \ntanh\n,\n      \nnIn\n: 1,\n      \nnOut\n: 10\n    }, {\n      \nnumber\n:1,\n      \ntype\n:\nRnnOutputLayer\n,\n      \nlossFunction\n: \nMCXENT\n,\n      \nactivation\n: \nsoftmax\n,\n      \nnIn\n: 10,\n      \nnOut\n: 5\n    }],\n    \noptimizationAlgo\n: {\n      \ntype\n: \nSTOCHASTIC_GRADIENT_DESCENT\n,\n      \niterations\n: 1\n    },\n    \nseed\n: 123,\n    \nlearningRate\n: 0.02,\n    \ngradientNormalization\n: {\n      \nthreshold\n: 0.45,\n      \ntype\n: \nClipElementWiseAbsoluteValue\n\n    },\n    \nupdater\n: {\n      \ntype\n: \nNESTEROVS\n,\n      \nmomentum\n: 0.85\n    },\n    \nweightInit\n: \nXAVIER\n\n  }\n}", 
            "title": "Home"
        }, 
        {
            "location": "/#blueweave", 
            "text": "Blueweave is a Java framework for recurrent sequential deep learning networks using\n guava and deeplearning4j.   bluewave  is intended to simplify the configuration and \n use of neural networks.    Java Docs  - The generated java docs.", 
            "title": "Blueweave"
        }, 
        {
            "location": "/#overview", 
            "text": "blueweave  uses a builder pattern to setup the netowrk:  //build the network\nClassifierNetwork network = new TimeseriesClassifierNetwork.TimeseriesClassifierNetworkBuilder()\n        .setNetworkClasses(trainingModel.getNetworkClasses())\n        .setTrainClassifications(trainingModel.getNetworkClassifications())\n        .setTrainTable(trainingTable)\n        .setTestTable(testingTable)\n        .setConfig(conf, TimeseriesClassifierNetwork )\n        .build();\n\n//the classification results as a table        \nTable Integer, String, Object  result = network.evaluate();", 
            "title": "Overview"
        }, 
        {
            "location": "/#data-model-for-testing-and-training", 
            "text": "Currently implementations are limited to \nrecurrent series, but more table types and network classifiers are intended. The data for both \ntrainging and testing can be represented.     Date  Series1  Series1      2016-04-01  0.12  0.22    2016-04-02  0.23  0.12    2016-04-03  0.46  0.10    2016-04-04  0.51  0.10    2016-04-05  1.46  0.11", 
            "title": "Data Model For Testing and Training"
        }, 
        {
            "location": "/#training-model", 
            "text": "The training model is used to define the mapping of each series to the possible classification \ntypes that will be used to train the network. This is an example of training a network to classify\na set of number series.  {\n   startDate : 2016-04-01 ,\n   endDate : 2016-08-01 ,\n   networkClasses :[\n    { id :0,  name : cyclic },\n    { id :1,  name : upward-trend },\n    { id :2,  name : downward-trend },\n    { id :3,  name : upward-shift },\n    { id :4,  name : downward-shift }\n  ],\n   networkClassifications :[\n    { name : PACW ,  classId :0},\n    { name : PAG ,   classId :0},\n    { name : PAHC ,  classId :4},\n    { name : PANW ,  classId :2},\n    { name : PATK ,  classId :3},\n    { name : PATR ,  classId :3},\n    { name : PAY ,   classId :4},\n    { name : PAYC ,   classId :1},\n    { name : PAYX ,   classId :3}\n  ]\n}  And to deserialize that model for use by the builder:  //make the training model\nSequenceNetworkModel trainingModel = GsonFactory.fromJson(\n        IOUtils.toString(\n                TimeseriesClassifierTest.class.getResourceAsStream( /data/01/train/trainModel01.json ),  UTF-8 ),\n        SequenceNetworkModel.class, GsonFactory.Type.DEFAULT);", 
            "title": "Training Model"
        }, 
        {
            "location": "/#data-models", 
            "text": "The data model for both training and testing is simple tables. An example of a serialized model \nfor training could be:  {\n   columns : [\n     DATE ,\n     PACW ,\n     PAG ,\n     PAHC ,\n     PANW ,\n     PATK ,\n     PAY ,\n     PAYC ,\n     PAYX \n  ],\n   data : [\n    [\n       2016-04-01 ,\n      37.07,\n      36.7,\n      27.39,\n      161.12,\n      45.92,\n      28.2,\n      35.43,\n      54.17\n    ],\n    [\n       2016-04-04 ,\n      37.11,\n      35.82,\n      27.29,\n      161.59,\n      45.37,\n      27.78,\n      35.8,\n      53.45\n    ],\n    [\n       2016-04-05 ,\n      36.25,\n      35.68,\n      26.66,\n      151.92,\n      46.05,\n      27.76,\n      34.43,\n      53.11\n    ],\n    [\n       2016-04-06 ,\n      36.76,\n      35.74,\n      27.26,\n      158.22,\n      46.64,\n      28.23,\n      35.52,\n      53.64\n    ]\n  ]\n}  And deserializing it is as simple as using the provided factory:  Table Date, String, Double  trainingTable = GsonFactory.fromJson(\n    IOUtils.toString( TimeseriesClassifierTest.class.getResourceAsStream(\n                /data/01/train/trainTable01.json ),  UTF-8 ),\n    TreeBasedTable.class, GsonFactory.Type.DEFAULT);", 
            "title": "Data Models"
        }, 
        {
            "location": "/#configurations-with-typesafe", 
            "text": "blueweave  uses typesafe to make setting up multi layer networks easier.   {\n   TimeseriesClassifierNetwork : {\n     layers : [{\n       number :0,\n       type : GravesLSTM ,\n       activation :  tanh ,\n       nIn : 1,\n       nOut : 10\n    }, {\n       number :1,\n       type : RnnOutputLayer ,\n       lossFunction :  MCXENT ,\n       activation :  softmax ,\n       nIn : 10,\n       nOut : 5\n    }],\n     optimizationAlgo : {\n       type :  STOCHASTIC_GRADIENT_DESCENT ,\n       iterations : 1\n    },\n     seed : 123,\n     learningRate : 0.02,\n     gradientNormalization : {\n       threshold : 0.45,\n       type :  ClipElementWiseAbsoluteValue \n    },\n     updater : {\n       type :  NESTEROVS ,\n       momentum : 0.85\n    },\n     weightInit :  XAVIER \n  }\n}", 
            "title": "Configurations With Typesafe"
        }
    ]
}